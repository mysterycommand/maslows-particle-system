{"version":3,"sources":["components/types.ts","components/Form/Form.module.css","components/Message/Message.module.css","components/App/App.module.css","components/Messages/Messages.module.css","components/Messages/Messages.tsx","components/Message/Message.tsx","components/Form/Form.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Sender","module","exports","Messages","messages","messagesTop","messagesHeight","dispatch","messagesElRef","useRef","sentinelElRef","isNearBottom","messagesTopRef","current","messagesHeightRef","useEffect","el","minScroll","clientHeight","type","payload","onScroll","scrollTop","scrollBottom","messagesBottom","addEventListener","passive","removeEventListener","isOwnMessage","length","sender","Self","setImmediate","scrollIntoView","behavior","className","style","ref","reduce","acc","id","createdAt","content","top","height","undefined","push","key","Sentinel","getComputedStyle","getStyle","window","outerTop","marginTop","offsetTop","parseInt","outerHeight","marginBottom","px","Message","messageElRef","clsx","Other","title","Form","message","setMessage","useState","action","onSubmit","event","preventDefault","setTimeout","Input","value","onChange","target","Button","disabled","reducer","state","uuid","Date","toISOString","find","m","index","indexOf","slice","App","useReducer","Device","Header","Footer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uIAAO,IAAKA,EAAZ,kC,SAAYA,K,YAAAA,E,eAAAA,M,sBCCZC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,OAAS,uB,gBCAjFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,MAAQ,yB,gBCA1FD,EAAOC,QAAU,CAAC,OAAS,oBAAoB,OAAS,oBAAoB,OAAS,sB,gBCArFD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,SAAW,6B,+BCDnE,iGAcO,MAAMC,EAAsB,EACjCC,WACAC,cACAC,iBACAC,eAEA,MAAMC,EAAgBC,iBAAyB,MACzCC,EAAgBD,iBAAsB,MAEtCE,EAAeF,kBAAO,GAEtBG,EAAiBH,iBAAOJ,GAC9BO,EAAeC,QAAUR,EAEzB,MAAMS,EAAoBL,iBAAOH,GAyDjC,OAxDAQ,EAAkBD,QAAUP,EAE5BS,oBAAU,KACR,IAAKP,EAAcK,QACjB,OAGF,MAAMG,EAAKR,EAAcK,QACnBI,EAAYD,EAAGE,aAAe,EAEpCX,EAAS,CACPY,KAAM,oBACNC,QAAS,CACPd,eAAgBU,EAAGE,gBAIvB,MAAMG,EAAW,KACXL,EAAGM,UAAYV,EAAeC,SAAWG,EAAGM,UAAYL,IAC1DD,EAAGM,UAAYL,GAGjBV,EAAS,CACPY,KAAM,iBACNC,QAAS,CACPf,YAAaW,EAAGM,aAIpB,MAAMC,EAAeP,EAAGM,UAAYN,EAAGE,aACjCM,EAAiBV,EAAkBD,QAAUG,EAAGE,aAAe,EACrEP,EAAaE,QAAUU,EAAeC,GAIxC,OADAR,EAAGS,iBAAiB,SAAUJ,EAAU,CAAEK,SAAS,IAC5C,KACLV,EAAGW,oBAAoB,SAAUN,KAElC,CAACd,IAEJQ,oBAAU,KAAO,IAAD,EACd,MAAMa,GAAe,UAAAxB,EAASA,EAASyB,OAAS,UAA3B,eAA+BC,UAAW9B,IAAO+B,MAElEpB,EAAaE,SAAWe,IAC1BI,EAAa,KACNtB,EAAcG,SAInBH,EAAcG,QAAQoB,eAAe,CACnCC,SAAU,cAIf,CAAC9B,IAGF,wBAAI+B,UAAWC,IAAMjC,SAAUkC,IAAK7B,GACjCJ,EAASkC,OACR,CAACC,GAAOC,KAAIC,YAAWX,SAAQY,UAASC,MAAKC,aAC3C,IAAKpC,EAAcK,QACjB,OAAO0B,EAGT,MAAM,aAAErB,GAAiBV,EAAcK,QAwBvC,YAvB2BgC,IAARF,QAAgCE,IAAXD,KAEtCD,GACAC,GACAD,EAAMtC,EAAca,GACpByB,EAAMC,EAASvC,IAGfkC,EAAIO,KACF,kBAAC,IAAD,CACEC,IAAKP,EACLA,GAAIA,EACJC,UAAWA,EACXX,OAAQA,EACRY,QAASA,EACTC,IAAKA,EACLC,OAAQA,EACRtC,eAAgBA,EAChBC,SAAUA,KAKTgC,GAET,IAEF,wBACEJ,UAAWC,IAAMY,SACjBZ,MAAO,CAAEO,IAAKrC,GACd+B,IAAK3B,Q,oJChHb,MAAQuC,iBAAkBC,GAAaC,OAEjCC,EAAyCpC,IAC7C,MAAM,UAAEqC,GAAcH,EAASlC,GAC/B,OAAOA,EAAGsC,UAAYC,SAASF,EAAW,KAGtCG,EAA4CxC,IAChD,MAAM,UAAEqC,EAAF,OAAaT,EAAb,aAAqBa,GAAiBP,EAASlC,GACrD,MAAO,CAACqC,EAAWT,EAAQa,GAAcnB,OACvC,CAACC,EAAKmB,IAAOnB,EAAMgB,SAASG,EAAI,IAChC,IAISC,EAAqB,EAChCnB,KACAC,YACAX,SACAY,UACAC,MACAC,SACAtC,iBACAC,eAEA,MAAMqD,EAAenD,iBAAsB,MAmB3C,OAjBAM,oBAAU,KACH6C,EAAa/C,cAINgC,IAARF,QAAgCE,IAAXD,GACvBrC,EAAS,CACPY,KAAM,gBACNC,QAAS,CACPoB,KACAG,IAAKrC,EAAiB8C,EAASQ,EAAa/C,SAC5C+B,OAAQY,EAAYI,EAAa/C,aAItC,CAACN,EAAUqC,EAAQJ,EAAIlC,EAAgBqC,IAGxC,wBACER,UAAW0B,YAAK,CACd,CAACzB,IAAMuB,UAAU,EACjB,CAACvB,IAAML,MAAOD,IAAW9B,IAAO+B,KAChC,CAACK,IAAM0B,OAAQhC,IAAW9B,IAAO8D,QAEnCC,MAAOtB,EACPL,MAAO,CACLO,OAEFN,IAAKuB,GAEJlB,K,uKC3DA,MAAMsB,EAAkB,EAAGzD,eAChC,MAAO0D,EAASC,GAAcC,mBAAS,IAEvC,OACE,0BACEC,OAAO,GACPjC,UAAWC,IAAM4B,KACjBK,SAAWC,IACTA,EAAMC,iBAENhE,EAAS,CACPY,KAAM,aACNC,QAAS,CACPU,OAAQ9B,IAAO+B,KACfW,QAASuB,KAIbO,WAAW,KACTjE,EAAS,CACPY,KAAM,aACNC,QAAS,CACPU,OAAQ9B,IAAO8D,MACfpB,QAASuB,MAGZ,KAEHC,EAAW,MAGb,2BACE/C,KAAK,OACLgB,UAAWC,IAAMqC,MACjBC,MAAOT,EACPU,SAAWL,IACTJ,EAAWI,EAAMM,OAAOF,UAG5B,4BAAQvD,KAAK,SAASgB,UAAWC,IAAMyC,OAAQC,SAAsB,KAAZb,GAAzD,Y,2BCxCN,MAAMc,EAAwC,CAACC,EAAOZ,KACpD,OAAQA,EAAOjD,MACb,IAAK,iBACH,MAAO,CACLf,SAAU4E,EAAM5E,SAChBC,YAAa+D,EAAOhD,QAAQf,YAC5BC,eAAgB0E,EAAM1E,gBAE1B,IAAK,oBACH,MAAO,CACLF,SAAU4E,EAAM5E,SAChBC,YAAa2E,EAAM3E,YACnBC,eAAgB8D,EAAOhD,QAAQd,gBAEnC,IAAK,aACH,MAAO,CACLF,SAAU,IACL4E,EAAM5E,SACT,CACEoC,GAAIyC,cACJxC,WAAW,IAAIyC,MAAOC,iBACnBf,EAAOhD,UAGdf,YAAa2E,EAAM3E,YACnBC,eAAgB0E,EAAM1E,gBAE1B,IAAK,gBACH,MAAM2D,EAAUe,EAAM5E,SAASgF,KAAMC,GAAMA,EAAE7C,KAAO4B,EAAOhD,QAAQoB,IAC7D8C,EAAQrB,EAAUe,EAAM5E,SAASmF,QAAQtB,IAAY,EAE3D,OAAOA,IAAsB,IAAXqB,EACd,CACElF,SAAU,IACL4E,EAAM5E,SAASoF,MAAM,EAAGF,GAC3B,IACKrB,EACHtB,IAAKyB,EAAOhD,QAAQuB,IACpBC,OAAQwB,EAAOhD,QAAQwB,WAEtBoC,EAAM5E,SAASoF,MAAMF,EAAQ,IAElCjF,YAAa2E,EAAM3E,YACnBC,eAAgB0E,EAAM1E,eAAiB8D,EAAOhD,QAAQwB,QAExDoC,EACN,QACE,OAAOA,IAIAS,EAAU,KACrB,OAAO,SAAErF,EAAF,YAAYC,EAAZ,eAAyBC,GAAkBC,GAAYmF,qBAC5DX,EACA,CACE3E,SAAU,GACVC,YAAa,EACbC,eAAgB,IAIpB,OACE,6BAAS6B,UAAWC,IAAMuD,QACxB,4BAAQxD,UAAWC,IAAMwD,QAAzB,QACA,kBAACzF,EAAA,EAAD,CACEC,SAAUA,EACVC,YAAaA,EACbC,eAAgBA,EAChBC,SAAUA,IAEZ,4BAAQ4B,UAAWC,IAAMyD,QACvB,kBAAC7B,EAAD,CAAMzD,SAAUA,OCpEJuF,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACX,EAAD,OAEFY,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KAAMC,IACLA,EAAaC,eAEdC,MAAOC,IACNC,QAAQD,MAAMA,EAAM7C,a","file":"static/js/main.b55f069a.chunk.js","sourcesContent":["export enum Sender {\n  Self = 'Self',\n  Other = 'Other',\n}\n\nexport interface MessageData {\n  id: string;\n  createdAt: string;\n  sender: Sender;\n  content: string;\n  top?: number;\n  height?: number;\n}\n\nexport interface AppState {\n  messages: MessageData[];\n  messagesTop: number;\n  messagesHeight: number;\n}\n\nexport interface SetMessagesTopAction {\n  type: 'setMessagesTop';\n  payload: {\n    messagesTop: number;\n  };\n}\n\nexport interface SetMessagesHeightAction {\n  type: 'setMessagesHeight';\n  payload: {\n    messagesHeight: number;\n  };\n}\n\nexport interface AddMessageAction {\n  type: 'addMessage';\n  payload: {\n    sender: Sender;\n    content: string;\n  };\n}\n\nexport interface RenderMessageAction {\n  type: 'renderMessage';\n  payload: {\n    id: string;\n    top: number;\n    height: number;\n  };\n}\n\nexport type AppAction =\n  | SetMessagesTopAction\n  | SetMessagesHeightAction\n  | AddMessageAction\n  | RenderMessageAction;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2boAo\",\"Input\":\"Form_Input__1kIqz\",\"Button\":\"Form_Button__1q5fL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__L9LXR\",\"Self\":\"Message_Self__13TvW\",\"Other\":\"Message_Other__oJUsj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Device\":\"App_Device__1vnMx\",\"Header\":\"App_Header__2rl_K\",\"Footer\":\"App_Footer__3E1PI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Messages\":\"Messages_Messages__2D-Ym\",\"Sentinel\":\"Messages_Sentinel__286rc\"};","import React, { Dispatch, FC, ReactNode, useEffect, useRef } from 'react';\n\nimport { Message } from '../Message';\nimport { AppAction, MessageData, Sender } from '../types';\n\nimport style from './Messages.module.css';\n\ninterface Props {\n  messages: MessageData[];\n  messagesTop: number;\n  messagesHeight: number;\n  dispatch: Dispatch<AppAction>;\n}\n\nexport const Messages: FC<Props> = ({\n  messages,\n  messagesTop,\n  messagesHeight,\n  dispatch,\n}) => {\n  const messagesElRef = useRef<HTMLOListElement>(null);\n  const sentinelElRef = useRef<HTMLLIElement>(null);\n\n  const isNearBottom = useRef(true);\n\n  const messagesTopRef = useRef(messagesTop);\n  messagesTopRef.current = messagesTop;\n\n  const messagesHeightRef = useRef(messagesHeight);\n  messagesHeightRef.current = messagesHeight;\n\n  useEffect(() => {\n    if (!messagesElRef.current) {\n      return;\n    }\n\n    const el = messagesElRef.current;\n    const minScroll = el.clientHeight - 8;\n\n    dispatch({\n      type: 'setMessagesHeight',\n      payload: {\n        messagesHeight: el.clientHeight,\n      },\n    });\n\n    const onScroll = () => {\n      if (el.scrollTop < messagesTopRef.current && el.scrollTop < minScroll) {\n        el.scrollTop = minScroll;\n      }\n\n      dispatch({\n        type: 'setMessagesTop',\n        payload: {\n          messagesTop: el.scrollTop,\n        },\n      });\n\n      const scrollBottom = el.scrollTop + el.clientHeight;\n      const messagesBottom = messagesHeightRef.current - el.clientHeight / 3;\n      isNearBottom.current = scrollBottom > messagesBottom;\n    };\n\n    el.addEventListener('scroll', onScroll, { passive: true });\n    return () => {\n      el.removeEventListener('scroll', onScroll);\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    const isOwnMessage = messages[messages.length - 1]?.sender === Sender.Self;\n\n    if (isNearBottom.current || isOwnMessage) {\n      setImmediate(() => {\n        if (!sentinelElRef.current) {\n          return;\n        }\n\n        sentinelElRef.current.scrollIntoView({\n          behavior: 'smooth',\n        });\n      });\n    }\n  }, [messages]);\n\n  return (\n    <ol className={style.Messages} ref={messagesElRef}>\n      {messages.reduce<ReactNode[]>(\n        (acc, { id, createdAt, sender, content, top, height }) => {\n          if (!messagesElRef.current) {\n            return acc;\n          }\n\n          const { clientHeight } = messagesElRef.current;\n          const didMeasure = top !== undefined && height !== undefined;\n          const isInBounds =\n            top &&\n            height &&\n            top < messagesTop + clientHeight &&\n            top + height > messagesTop;\n\n          if (!didMeasure || isInBounds) {\n            acc.push(\n              <Message\n                key={id}\n                id={id}\n                createdAt={createdAt}\n                sender={sender}\n                content={content}\n                top={top}\n                height={height}\n                messagesHeight={messagesHeight}\n                dispatch={dispatch}\n              />,\n            );\n          }\n\n          return acc;\n        },\n        [],\n      )}\n      <li\n        className={style.Sentinel}\n        style={{ top: messagesHeight }}\n        ref={sentinelElRef}\n      ></li>\n    </ol>\n  );\n};\n","import clsx from 'clsx';\nimport React, { Dispatch, FC, useEffect, useRef } from 'react';\n\nimport { AppAction, MessageData, Sender } from '../types';\n\nimport style from './Message.module.css';\n\ninterface Props extends MessageData {\n  messagesHeight: number;\n  dispatch: Dispatch<AppAction>;\n}\n\nconst { getComputedStyle: getStyle } = window;\n\nconst outerTop: (el: HTMLElement) => number = (el) => {\n  const { marginTop } = getStyle(el);\n  return el.offsetTop - parseInt(marginTop, 10);\n};\n\nconst outerHeight: (el: HTMLElement) => number = (el) => {\n  const { marginTop, height, marginBottom } = getStyle(el);\n  return [marginTop, height, marginBottom].reduce(\n    (acc, px) => acc + parseInt(px, 10),\n    0,\n  );\n};\n\nexport const Message: FC<Props> = ({\n  id,\n  createdAt,\n  sender,\n  content,\n  top,\n  height,\n  messagesHeight,\n  dispatch,\n}) => {\n  const messageElRef = useRef<HTMLLIElement>(null);\n\n  useEffect(() => {\n    if (!messageElRef.current) {\n      return;\n    }\n\n    if (top === undefined && height === undefined) {\n      dispatch({\n        type: 'renderMessage',\n        payload: {\n          id,\n          top: messagesHeight + outerTop(messageElRef.current),\n          height: outerHeight(messageElRef.current),\n        },\n      });\n    }\n  }, [dispatch, height, id, messagesHeight, top]);\n\n  return (\n    <li\n      className={clsx({\n        [style.Message]: true,\n        [style.Self]: sender === Sender.Self,\n        [style.Other]: sender === Sender.Other,\n      })}\n      title={createdAt}\n      style={{\n        top,\n      }}\n      ref={messageElRef}\n    >\n      {content}\n    </li>\n  );\n};\n","import React, { Dispatch, FC, useState } from 'react';\n\nimport { AppAction, Sender } from '../types';\n\nimport style from './Form.module.css';\n\ninterface Props {\n  dispatch: Dispatch<AppAction>;\n}\n\nexport const Form: FC<Props> = ({ dispatch }) => {\n  const [message, setMessage] = useState('');\n\n  return (\n    <form\n      action=\"\"\n      className={style.Form}\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        dispatch({\n          type: 'addMessage',\n          payload: {\n            sender: Sender.Self,\n            content: message,\n          },\n        });\n\n        setTimeout(() => {\n          dispatch({\n            type: 'addMessage',\n            payload: {\n              sender: Sender.Other,\n              content: message,\n            },\n          });\n        }, 2_000);\n\n        setMessage('');\n      }}\n    >\n      <input\n        type=\"text\"\n        className={style.Input}\n        value={message}\n        onChange={(event) => {\n          setMessage(event.target.value);\n        }}\n      />\n      <button type=\"submit\" className={style.Button} disabled={message === ''}>\n        ↑\n      </button>\n    </form>\n  );\n};\n","import React, { FC, Reducer, useReducer } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport { Form } from '../Form';\nimport { Messages } from '../Messages';\nimport { AppAction, AppState } from '../types';\n\nimport style from './App.module.css';\n\nconst reducer: Reducer<AppState, AppAction> = (state, action) => {\n  switch (action.type) {\n    case 'setMessagesTop':\n      return {\n        messages: state.messages,\n        messagesTop: action.payload.messagesTop,\n        messagesHeight: state.messagesHeight,\n      };\n    case 'setMessagesHeight':\n      return {\n        messages: state.messages,\n        messagesTop: state.messagesTop,\n        messagesHeight: action.payload.messagesHeight,\n      };\n    case 'addMessage':\n      return {\n        messages: [\n          ...state.messages,\n          {\n            id: uuid(),\n            createdAt: new Date().toISOString(),\n            ...action.payload,\n          },\n        ],\n        messagesTop: state.messagesTop,\n        messagesHeight: state.messagesHeight,\n      };\n    case 'renderMessage':\n      const message = state.messages.find((m) => m.id === action.payload.id);\n      const index = message ? state.messages.indexOf(message) : -1;\n\n      return message && index !== -1\n        ? {\n            messages: [\n              ...state.messages.slice(0, index),\n              {\n                ...message,\n                top: action.payload.top,\n                height: action.payload.height,\n              },\n              ...state.messages.slice(index + 1),\n            ],\n            messagesTop: state.messagesTop,\n            messagesHeight: state.messagesHeight + action.payload.height,\n          }\n        : state;\n    default:\n      return state;\n  }\n};\n\nexport const App: FC = () => {\n  const [{ messages, messagesTop, messagesHeight }, dispatch] = useReducer(\n    reducer,\n    {\n      messages: [],\n      messagesTop: 0,\n      messagesHeight: 0,\n    },\n  );\n\n  return (\n    <article className={style.Device}>\n      <header className={style.Header}>Echo</header>\n      <Messages\n        messages={messages}\n        messagesTop={messagesTop}\n        messagesHeight={messagesHeight}\n        dispatch={dispatch}\n      />\n      <footer className={style.Footer}>\n        <Form dispatch={dispatch} />\n      </footer>\n    </article>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}