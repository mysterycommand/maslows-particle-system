{"version":3,"sources":["components/App/App.module.css","components/Form/Form.module.css","components/Message/Message.module.css","components/types.ts","components/Form/Form.tsx","components/Message/Message.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Sender","Form","dispatch","message","setMessage","useState","action","className","style","onSubmit","event","preventDefault","type","payload","sender","Self","content","setTimeout","Other","Input","value","onChange","target","Button","disabled","getComputedStyle","getStyle","window","outerTop","el","marginTop","offsetTop","parseInt","outerHeight","height","marginBottom","reduce","acc","px","Message","id","createdAt","top","messagesHeight","messageRef","useRef","useEffect","current","scrollIntoView","behavior","clsx","title","ref","reducer","state","messages","uuid","Date","toISOString","find","m","index","indexOf","slice","App","useReducer","messagesRef","clientHeight","messagesTop","setMessagesTop","onScroll","scrollTop","addEventListener","passive","removeEventListener","Device","Header","Messages","push","key","Sentinel","Footer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.00b09fbc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__aOmNj\",\"Device\":\"App_Device__1vnMx\",\"Header\":\"App_Header__2rl_K\",\"Footer\":\"App_Footer__3E1PI\",\"Messages\":\"App_Messages__3MBtI\",\"Sentinel\":\"App_Sentinel__2T4Ch\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2boAo\",\"Input\":\"Form_Input__1kIqz\",\"Button\":\"Form_Button__1q5fL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__L9LXR\",\"Self\":\"Message_Self__13TvW\",\"Other\":\"Message_Other__oJUsj\"};","export enum Sender {\n  Self = 'Self',\n  Other = 'Other',\n}\n\nexport interface MessageData {\n  id: string;\n  createdAt: string;\n  sender: Sender;\n  content: string;\n  top?: number;\n  height?: number;\n}\n\nexport interface AppState {\n  messages: MessageData[];\n  messagesHeight: number;\n}\n\nexport interface InitMessagesAction {\n  type: 'initMessages';\n  payload: {\n    messagesHeight: number;\n  };\n}\n\nexport interface AddMessageAction {\n  type: 'addMessage';\n  payload: {\n    sender: Sender;\n    content: string;\n  };\n}\n\nexport interface RenderMessageAction {\n  type: 'renderMessage';\n  payload: {\n    id: string;\n    top: number;\n    height: number;\n  };\n}\n\nexport type AppAction =\n  | InitMessagesAction\n  | AddMessageAction\n  | RenderMessageAction;\n","import React, { Dispatch, FC, useState } from 'react';\n\nimport { AppAction, Sender } from '../types';\n\nimport style from './Form.module.css';\n\ninterface Props {\n  dispatch: Dispatch<AppAction>;\n}\n\nexport const Form: FC<Props> = ({ dispatch }) => {\n  const [message, setMessage] = useState('');\n\n  return (\n    <form\n      action=\"\"\n      className={style.Form}\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        dispatch({\n          type: 'addMessage',\n          payload: {\n            sender: Sender.Self,\n            content: message,\n          },\n        });\n\n        setTimeout(() => {\n          dispatch({\n            type: 'addMessage',\n            payload: {\n              sender: Sender.Other,\n              content: message,\n            },\n          });\n        }, 2_000);\n\n        setMessage('');\n      }}\n    >\n      <input\n        type=\"text\"\n        className={style.Input}\n        value={message}\n        onChange={(event) => {\n          setMessage(event.target.value);\n        }}\n      />\n      <button type=\"submit\" className={style.Button} disabled={message === ''}>\n        â†‘\n      </button>\n    </form>\n  );\n};\n","import clsx from 'clsx';\nimport React, { FC, useEffect, useRef, Dispatch } from 'react';\n\nimport { MessageData, Sender, AppAction } from '../types';\n\nimport style from './Message.module.css';\n\ninterface Props extends MessageData {\n  messagesHeight: number;\n  dispatch: Dispatch<AppAction>;\n}\n\nconst { getComputedStyle: getStyle } = window;\n\nconst outerTop: (el: HTMLElement) => number = (el) => {\n  const { marginTop } = getStyle(el);\n  return el.offsetTop - parseInt(marginTop, 10);\n};\n\nconst outerHeight: (el: HTMLElement) => number = (el) => {\n  const { marginTop, height, marginBottom } = getStyle(el);\n  return [marginTop, height, marginBottom].reduce(\n    (acc, px) => acc + parseInt(px, 10),\n    0,\n  );\n};\n\nexport const Message: FC<Props> = ({\n  id,\n  createdAt,\n  sender,\n  content,\n  top,\n  height,\n  messagesHeight,\n  dispatch,\n}) => {\n  const messageRef = useRef<HTMLLIElement>(null);\n\n  useEffect(() => {\n    if (!messageRef.current) {\n      return;\n    }\n\n    if (!(top && height)) {\n      dispatch({\n        type: 'renderMessage',\n        payload: {\n          id,\n          top: messagesHeight + outerTop(messageRef.current),\n          height: outerHeight(messageRef.current),\n        },\n      });\n    } else {\n      messageRef.current.scrollIntoView({\n        behavior: 'smooth',\n      });\n    }\n  }, [dispatch, height, id, messagesHeight, top]);\n\n  return (\n    <li\n      className={clsx({\n        [style.Message]: true,\n        [style.Self]: sender === Sender.Self,\n        [style.Other]: sender === Sender.Other,\n      })}\n      title={createdAt}\n      style={{\n        top,\n      }}\n      ref={messageRef}\n    >\n      {content}\n    </li>\n  );\n};\n","import React, {\n  FC,\n  ReactNode,\n  Reducer,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport { Form } from '../Form';\nimport { Message } from '../Message';\nimport { AppAction, AppState } from '../types';\n\nimport style from './App.module.css';\n\nconst reducer: Reducer<AppState, AppAction> = (state, action) => {\n  switch (action.type) {\n    case 'initMessages':\n      return {\n        messages: state.messages,\n        messagesHeight: action.payload.messagesHeight,\n      };\n    case 'addMessage':\n      return {\n        messages: [\n          ...state.messages,\n          {\n            id: uuid(),\n            createdAt: new Date().toISOString(),\n            ...action.payload,\n          },\n        ],\n        messagesHeight: state.messagesHeight,\n      };\n    case 'renderMessage':\n      const message = state.messages.find((m) => m.id === action.payload.id);\n      const index = message ? state.messages.indexOf(message) : -1;\n\n      return message && index !== -1\n        ? {\n            messages: [\n              ...state.messages.slice(0, index),\n              {\n                ...message,\n                top: action.payload.top,\n                height: action.payload.height,\n              },\n              ...state.messages.slice(index + 1),\n            ],\n            messagesHeight: state.messagesHeight + action.payload.height,\n          }\n        : state;\n    default:\n      return state;\n  }\n};\n\nexport const App: FC = () => {\n  const [{ messages, messagesHeight }, dispatch] = useReducer(reducer, {\n    messages: [],\n    messagesHeight: 0,\n  });\n\n  const messagesRef = useRef<HTMLOListElement>(null);\n\n  useEffect(() => {\n    if (!messagesRef.current) {\n      return;\n    }\n\n    dispatch({\n      type: 'initMessages',\n      payload: {\n        messagesHeight: messagesRef.current.clientHeight,\n      },\n    });\n  }, []);\n\n  const [messagesTop, setMessagesTop] = useState(0);\n\n  useEffect(() => {\n    if (!messagesRef.current) {\n      return;\n    }\n\n    const el = messagesRef.current;\n    const onScroll = () => setMessagesTop(el.scrollTop);\n    el.addEventListener('scroll', onScroll, { passive: true });\n\n    return () => {\n      el.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n\n  return (\n    <div className={style.App}>\n      <article className={style.Device}>\n        <header className={style.Header}>Echo</header>\n        <ol className={style.Messages} ref={messagesRef}>\n          {messages.reduce<ReactNode[]>(\n            (acc, { id, createdAt, sender, content, top, height }) => {\n              if (!messagesRef.current) {\n                return acc;\n              }\n\n              const { clientHeight } = messagesRef.current;\n              const didMeasure = top && height;\n              const isInBounds =\n                top &&\n                height &&\n                top < messagesTop + clientHeight &&\n                top + height > messagesTop;\n\n              if (!didMeasure || isInBounds) {\n                acc.push(\n                  <Message\n                    key={id}\n                    id={id}\n                    createdAt={createdAt}\n                    sender={sender}\n                    content={content}\n                    top={top}\n                    height={height}\n                    messagesHeight={messagesHeight}\n                    dispatch={dispatch}\n                  />,\n                );\n              }\n\n              return acc;\n            },\n            [],\n          )}\n          <li className={style.Sentinel} style={{ top: messagesHeight }}></li>\n        </ol>\n        <footer className={style.Footer}>\n          <Form dispatch={dispatch} />\n        </footer>\n      </article>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}